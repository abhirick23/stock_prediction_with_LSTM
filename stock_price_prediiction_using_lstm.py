# -*- coding: utf-8 -*-
"""stock_price_prediiction_using_LSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kvZSGFuzchFylctAfx44YyNuBsqewtAt
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive/')
# %cd /gdrive

ls

cd /gdrive/MyDrive/Stock_price

ls

"""# Importing Libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense, Dropout
from sklearn.preprocessing import StandardScaler

import warnings
warnings.filterwarnings("ignore")

"""# Uploading Dataset"""

df_train=pd.read_csv('Uniqlo(FastRetailing) 2012-2016 Training - stocks2012-2016.csv')
df_train.head()

df_test=pd.read_csv('Uniqlo(FastRetailing) 2017 Test - stocks2017.csv')
df_test.head()

df_train.info()

df_test.info()

df_train.describe().style.background_gradient(axis=0,cmap = 'RdYlGn')

"""# EDA"""

df_train.isna().sum().sum()

df_test.isna().sum().sum()

df_train.columns

train_dates = pd.to_datetime(df_train['Date'])
print(train_dates)

cols = list(df_train)[1:5]
cols

df_training = df_train[cols].astype(int)

df_testing = df_test[cols].astype(int)

plot_train=df_training
plot_train.plot.line()

plot_train=df_testing
plot_train.plot.line()

scaler = StandardScaler()
scaler = scaler.fit(df_training)
df_training_scaled = scaler.transform(df_training)

scaler = StandardScaler()
scaler = scaler.fit(df_testing)
df_testing_scaled = scaler.transform(df_testing)

trainX = []
trainY = []
testX=[]
testY=[]

n_future = 1  
n_past = 14 

n_past_test=4

for i in range(n_past, len(df_training_scaled) - n_future +1):
    trainX.append(df_training_scaled[i - n_past:i, 0:df_training.shape[1]])
    trainY.append(df_training_scaled[i + n_future - 1:i + n_future, 0])

trainX, trainY = np.array(trainX), np.array(trainY)

print('trainX shape == {}.'.format(trainX.shape))
print('trainY shape == {}.'.format(trainY.shape))

for i in range(n_past_test, len(df_testing_scaled) - n_future +1):
    testX.append(df_testing_scaled[i - n_past_test:i, 0:df_testing.shape[1]])
    testY.append(df_testing_scaled[i + n_future - 1:i + n_future, 0])

testX, testY = np.array(testX), np.array(testY)

print('testX shape == {}.'.format(testX.shape))
print('testY shape == {}.'.format(testY.shape))

"""# Model creation"""

model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(trainX.shape[1], trainX.shape[2]), return_sequences=True))
model.add(LSTM(32, activation='relu', return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(trainY.shape[1]))

model.compile(optimizer='adam', loss='mse')

model.summary()

history = model.fit(trainX, trainY,
                    epochs=15, 
                    batch_size=16, 
                    validation_split=0.1, verbose=1)

plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.legend()

model1 = Sequential()
model1.add(LSTM(64, activation='relu', input_shape=(testX.shape[1], testX.shape[2]), return_sequences=True))
model1.add(LSTM(32, activation='relu', return_sequences=False))
model1.add(Dropout(0.2))
model1.add(Dense(testY.shape[1]))

model1.compile(optimizer='adam', loss='mse')

model1.summary()

history = model1.fit(testX, testY,
                    epochs=15, 
                    batch_size=16, 
                    validation_split=0.1, verbose=1)

plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.legend()

"""# Prediction"""

train_predictions = model.predict(trainX).flatten()
trainY=trainY.flatten()
train_results = pd.DataFrame(data={'Train Predictions':train_predictions, 'Actuals':trainY})
train_results

plt.plot(train_results['Train Predictions'][50:100])
plt.plot(train_results['Actuals'][50:100])

test_predictions = model.predict(testX).flatten()
testY=testY.flatten()
test_results = pd.DataFrame(data={'Test Predictions':test_predictions, 'Actuals':testY})
test_results

plt.plot(test_results['Test Predictions'])
plt.plot(test_results['Actuals'])